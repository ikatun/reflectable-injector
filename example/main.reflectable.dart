// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import 'dart:core';
import 'main.dart' as prefix1;
import 'package:reflect_example/lazy.dart' as prefix2;
import 'package:reflect_example/reflected_injector.dart' as prefix3;
import 'package:reflect_example/reflectors.dart' as prefix0;

// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const
// ignore_for_file: implementation_imports

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.Reflector(): r.ReflectorData(
      <m.TypeMirror>[
        r.NonGenericClassMirrorImpl(
            r'A',
            r'.A',
            7,
            0,
            const prefix0.Reflector(),
            const <int>[6],
            const <int>[7, 8, 9, 10, 11],
            const <int>[],
            -1,
            {},
            {},
            {r'': (b) => () => b ? prefix1.A() : null},
            -1,
            -1,
            const <int>[-1],
            const <Object>[
              prefix0.dependency,
              prefix0.DependencyScope.Singleton
            ],
            null),
        r.NonGenericClassMirrorImpl(
            r'B',
            r'.B',
            7,
            1,
            const prefix0.Reflector(),
            const <int>[0, 12, 14],
            const <int>[7, 8, 9, 10, 11, 12, 13],
            const <int>[],
            -1,
            {},
            {},
            {r'': (b) => (a) => b ? prefix1.B(a) : null},
            -1,
            -1,
            const <int>[-1],
            const <Object>[
              prefix0.dependency,
              prefix0.DependencyScope.Singleton
            ],
            null),
        r.NonGenericClassMirrorImpl(
            r'C',
            r'.C',
            7,
            2,
            const prefix0.Reflector(),
            const <int>[1, 2, 15, 18],
            const <int>[7, 8, 9, 10, 11, 15, 16, 17],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bb) => (a, b) => bb ? prefix1.C(a, b) : null},
            -1,
            -1,
            const <int>[-1],
            const <Object>[
              prefix0.dependency,
              prefix0.DependencyScope.Singleton
            ],
            null),
        r.NonGenericClassMirrorImpl(
            r'CyclicA',
            r'.CyclicA',
            7,
            3,
            const prefix0.Reflector(),
            const <int>[3, 19, 21],
            const <int>[7, 8, 9, 10, 11, 19, 20],
            const <int>[],
            -1,
            {},
            {},
            {r'': (b) => (cyclicB) => b ? prefix1.CyclicA(cyclicB) : null},
            -1,
            -1,
            const <int>[-1],
            const <Object>[
              prefix0.dependency,
              prefix0.DependencyScope.Singleton
            ],
            null),
        r.NonGenericClassMirrorImpl(
            r'CyclicB',
            r'.CyclicB',
            7,
            4,
            const prefix0.Reflector(),
            const <int>[4, 22, 24],
            const <int>[7, 8, 9, 10, 11, 22, 23],
            const <int>[],
            -1,
            {},
            {},
            {r'': (b) => (lazy) => b ? prefix1.CyclicB(lazy) : null},
            -1,
            -1,
            const <int>[-1],
            const <Object>[
              prefix0.dependency,
              prefix0.DependencyScope.Singleton
            ],
            null),
        r.NonGenericClassMirrorImpl(
            r'LazyInject',
            r'.LazyInject',
            7,
            5,
            const prefix0.Reflector(),
            const <int>[5, 25, 27],
            const <int>[7, 8, 9, 10, 11, 25, 26],
            const <int>[],
            -1,
            {},
            {},
            {r'': (b) => (injector) => b ? prefix2.LazyInject(injector) : null},
            -1,
            -1,
            const <int>[-1],
            const <Object>[
              prefix0.dependency,
              prefix0.DependencyScope.Singleton
            ],
            null)
      ],
      <m.DeclarationMirror>[
        r.VariableMirrorImpl(
            r'a', 33797, 1, const prefix0.Reflector(), 0, 0, 0, null, const []),
        r.VariableMirrorImpl(
            r'a', 33797, 2, const prefix0.Reflector(), 0, 0, 0, null, const []),
        r.VariableMirrorImpl(
            r'b', 33797, 2, const prefix0.Reflector(), 1, 1, 1, null, const []),
        r.VariableMirrorImpl(r'cyclicB', 33797, 3, const prefix0.Reflector(), 4,
            4, 4, null, const []),
        r.VariableMirrorImpl(r'cyclicA', 2130949, 4, const prefix0.Reflector(),
            -1, 6, 7, null, const []),
        r.VariableMirrorImpl(r'injector', 33797, 5, const prefix0.Reflector(),
            -1, 8, 8, null, const []),
        r.MethodMirrorImpl(r'', 0, 0, -1, 0, 0, null, const <int>[],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'==', 131074, null, -1, 9, 9, null, const <int>[0],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'toString', 131074, null, -1, 10, 10, null,
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'noSuchMethod', 65538, null, null, null, null, null,
            const <int>[1], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'hashCode', 131075, null, -1, 11, 11, null,
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'runtimeType', 131075, null, -1, 12, 12, null,
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'method', 65538, 1, null, null, null, null,
            const <int>[], const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 0, 13),
        r.MethodMirrorImpl(r'', 0, 1, -1, 1, 1, null, const <int>[2],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'method', 65538, 2, null, null, null, null,
            const <int>[], const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 1, 16),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 2, 17),
        r.MethodMirrorImpl(r'', 0, 2, -1, 2, 2, null, const <int>[3, 4],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'methodA', 65538, 3, null, null, null, null,
            const <int>[], const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 3, 20),
        r.MethodMirrorImpl(r'', 0, 3, -1, 3, 3, null, const <int>[5],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'methodB', 65538, 4, null, null, null, null,
            const <int>[], const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 4, 23),
        r.MethodMirrorImpl(r'', 0, 4, -1, 4, 4, null, const <int>[6],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'as', 4325378, 5, -1, 13, 14, null, const <int>[],
            const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 5, 26),
        r.MethodMirrorImpl(r'', 0, 5, -1, 5, 5, null, const <int>[7],
            const prefix0.Reflector(), const [])
      ],
      <m.ParameterMirror>[
        r.ParameterMirrorImpl(r'other', 32774, 7, const prefix0.Reflector(), -1,
            15, 15, null, const [], null, null),
        r.ParameterMirrorImpl(r'invocation', 32774, 9,
            const prefix0.Reflector(), -1, 16, 16, null, const [], null, null),
        r.ParameterMirrorImpl(r'a', 32774, 14, const prefix0.Reflector(), 0, 0,
            0, null, const [], null, null),
        r.ParameterMirrorImpl(r'a', 32774, 18, const prefix0.Reflector(), 0, 0,
            0, null, const [], null, null),
        r.ParameterMirrorImpl(r'b', 32774, 18, const prefix0.Reflector(), 1, 1,
            1, null, const [], null, null),
        r.ParameterMirrorImpl(r'cyclicB', 32774, 21, const prefix0.Reflector(),
            4, 4, 4, null, const [], null, null),
        r.ParameterMirrorImpl(r'lazy', 32774, 24, const prefix0.Reflector(), 5,
            5, 5, null, const [], null, null),
        r.ParameterMirrorImpl(r'injector', 32774, 27, const prefix0.Reflector(),
            -1, 8, 8, null, const [], null, null)
      ],
      <Type>[
        prefix1.A,
        prefix1.B,
        prefix1.C,
        prefix1.CyclicA,
        prefix1.CyclicB,
        prefix2.LazyInject,
        const m.TypeValue<prefix2.Lazy<prefix1.CyclicA>>().type,
        prefix2.Lazy,
        prefix3.ReflectedInjector,
        bool,
        String,
        int,
        Type,
        const r.FakeType(r'.Lazy<T*>'),
        prefix2.Lazy,
        Object,
        Invocation
      ],
      6,
      {
        r'==': (dynamic instance) => (x) => instance == x,
        r'toString': (dynamic instance) => instance.toString,
        r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
        r'hashCode': (dynamic instance) => instance.hashCode,
        r'runtimeType': (dynamic instance) => instance.runtimeType,
        r'method': (dynamic instance) => instance.method,
        r'a': (dynamic instance) => instance.a,
        r'b': (dynamic instance) => instance.b,
        r'methodA': (dynamic instance) => instance.methodA,
        r'cyclicB': (dynamic instance) => instance.cyclicB,
        r'methodB': (dynamic instance) => instance.methodB,
        r'cyclicA': (dynamic instance) => instance.cyclicA,
        r'as': (dynamic instance) => instance.as,
        r'injector': (dynamic instance) => instance.injector
      },
      {},
      null,
      [])
};

final _memberSymbolMap = null;

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
