// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import 'dart:core';
import 'main.dart' as prefix1;
import 'package:reflect_example/reflected_injector.dart' as prefix0;

// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const
// ignore_for_file: implementation_imports

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.Reflector(): r.ReflectorData(
      <m.TypeMirror>[
        r.NonGenericClassMirrorImpl(
            r'A',
            r'.A',
            7,
            0,
            const prefix0.Reflector(),
            const <int>[3],
            const <int>[4, 5, 6, 7, 8],
            const <int>[],
            -1,
            {},
            {},
            {r'': (b) => () => b ? prefix1.A() : null},
            0,
            0,
            const <int>[],
            const <Object>[prefix0.reflector],
            null),
        r.NonGenericClassMirrorImpl(
            r'B',
            r'.B',
            7,
            1,
            const prefix0.Reflector(),
            const <int>[0, 10],
            const <int>[4, 5, 6, 7, 8, 9],
            const <int>[],
            -1,
            {},
            {},
            {r'': (b) => (a) => b ? prefix1.B(a) : null},
            0,
            1,
            const <int>[],
            const <Object>[prefix0.reflector],
            null),
        r.NonGenericClassMirrorImpl(
            r'C',
            r'.C',
            7,
            2,
            const prefix0.Reflector(),
            const <int>[1, 2, 11, 14],
            const <int>[4, 5, 6, 7, 8, 11, 12, 13],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bb) => (a, b) => bb ? prefix1.C(a, b) : null},
            0,
            2,
            const <int>[],
            const <Object>[prefix0.reflector],
            null)
      ],
      <m.DeclarationMirror>[
        r.VariableMirrorImpl(r'a', 33797, 1, const prefix0.Reflector(), 0, 0, 0,
            const <int>[], const []),
        r.VariableMirrorImpl(r'a', 33797, 2, const prefix0.Reflector(), 0, 0, 0,
            const <int>[], const []),
        r.VariableMirrorImpl(r'b', 33797, 2, const prefix0.Reflector(), 1, 1, 1,
            const <int>[], const []),
        r.MethodMirrorImpl(r'', 64, 0, -1, 0, 0, const <int>[], const <int>[],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'==', 131074, null, -1, 3, 3, const <int>[],
            const <int>[0], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'toString', 131074, null, -1, 4, 4, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'noSuchMethod', 65538, null, null, null, null,
            const <int>[], const <int>[1], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'hashCode', 131075, null, -1, 5, 5, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'runtimeType', 131075, null, -1, 6, 6,
            const <int>[], const <int>[], const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 0, 9),
        r.MethodMirrorImpl(r'', 0, 1, -1, 1, 1, const <int>[], const <int>[2],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'method', 65538, 2, null, null, null, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 1, 12),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 2, 13),
        r.MethodMirrorImpl(r'', 0, 2, -1, 2, 2, const <int>[],
            const <int>[3, 4], const prefix0.Reflector(), const [])
      ],
      <m.ParameterMirror>[
        r.ParameterMirrorImpl(r'other', 32774, 4, const prefix0.Reflector(), -1,
            7, 7, const <int>[], const [], null, null),
        r.ParameterMirrorImpl(
            r'invocation',
            32774,
            6,
            const prefix0.Reflector(),
            -1,
            8,
            8,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(r'a', 32774, 10, const prefix0.Reflector(), 0, 0,
            0, const <int>[], const [], null, null),
        r.ParameterMirrorImpl(r'a', 32774, 14, const prefix0.Reflector(), 0, 0,
            0, const <int>[], const [], null, null),
        r.ParameterMirrorImpl(r'b', 32774, 14, const prefix0.Reflector(), 1, 1,
            1, const <int>[], const [], null, null)
      ],
      <Type>[
        prefix1.A,
        prefix1.B,
        prefix1.C,
        bool,
        String,
        int,
        Type,
        Object,
        Invocation
      ],
      3,
      {
        r'==': (dynamic instance) => (x) => instance == x,
        r'toString': (dynamic instance) => instance.toString,
        r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
        r'hashCode': (dynamic instance) => instance.hashCode,
        r'runtimeType': (dynamic instance) => instance.runtimeType,
        r'a': (dynamic instance) => instance.a,
        r'method': (dynamic instance) => instance.method,
        r'b': (dynamic instance) => instance.b
      },
      {},
      <m.LibraryMirror>[
        r.LibraryMirrorImpl(r'', Uri.parse(r'reflectable://0/'),
            const prefix0.Reflector(), const <int>[], {}, {}, const [], null)
      ],
      [])
};

final _memberSymbolMap = {
  const Symbol(r''): r'',
  const Symbol(r'=='): r'==',
  const Symbol(r'toString'): r'toString',
  const Symbol(r'noSuchMethod'): r'noSuchMethod',
  const Symbol(r'hashCode'): r'hashCode',
  const Symbol(r'runtimeType'): r'runtimeType',
  const Symbol(r'a'): r'a',
  const Symbol(r'method'): r'method',
  const Symbol(r'b'): r'b'
};

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
